"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "utils_jupyterlite-loader_ts";
exports.ids = ["utils_jupyterlite-loader_ts"];
exports.modules = {

/***/ "./utils/jupyterlite-loader.ts":
/*!*************************************!*\
  !*** ./utils/jupyterlite-loader.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanupJupyterLiteInstance: () => (/* binding */ cleanupJupyterLiteInstance),\n/* harmony export */   initializeJupyterLiteInContainer: () => (/* binding */ initializeJupyterLiteInContainer)\n/* harmony export */ });\n/**\n * JupyterLite Dynamic Loader for Next.js Integration\n * \n * This module handles the dynamic loading and initialization of JupyterLite\n * within a React component, adapting the bootstrap process for container mounting.\n */ // Global state to track JupyterLite instances\nconst instances = new Map();\n/**\n * Initialize JupyterLite in a specific container element\n */ async function initializeJupyterLiteInContainer(container, configScript, config) {\n    try {\n        console.log(\"\\uD83D\\uDE80 Initializing JupyterLite in container...\");\n        // Clear container safely\n        while(container.firstChild){\n            container.removeChild(container.firstChild);\n        }\n        // Create the placeholder content using DOM methods instead of innerHTML\n        const wrapper = document.createElement(\"div\");\n        wrapper.style.cssText = `\n      display: flex; \n      flex-direction: column; \n      align-items: center; \n      justify-content: center; \n      height: 100%; \n      font-family: system-ui, sans-serif;\n      background: #f5f5f5;\n      border: 2px dashed #ccc;\n      border-radius: 8px;\n      padding: 20px;\n      box-sizing: border-box;\n    `;\n        const title = document.createElement(\"h2\");\n        title.textContent = \"\\uD83C\\uDF89 JupyterLite Next.js Integration\";\n        title.style.cssText = \"color: #333; margin-bottom: 20px; text-align: center;\";\n        const description = document.createElement(\"p\");\n        description.innerHTML = `\n      Success! The integration is working. JupyterLite source code is available in packages/ directory.<br>\n      <strong>Next step:</strong> Build the JupyterLite packages to enable the full Jupyter interface.\n    `;\n        description.style.cssText = \"color: #666; text-align: center; max-width: 500px; line-height: 1.5; margin-bottom: 20px;\";\n        const commandBox = document.createElement(\"div\");\n        commandBox.innerHTML = `\n      <strong>Available Commands:</strong><br>\n      • <code>yarn build:jupyter</code> - Build JupyterLite packages<br>\n      • <code>yarn dev</code> - Start development server<br>\n      • Open browser console to test kernel bridge (when built)\n    `;\n        commandBox.style.cssText = \"margin-top: 20px; padding: 15px; background: #e8f4f8; border-radius: 4px; border-left: 4px solid #0366d6; max-width: 500px;\";\n        const configInfo = document.createElement(\"div\");\n        configInfo.textContent = `Configuration: Theme=${config.theme || \"auto\"}, KernelBridge=${config.enableKernelBridge ? \"enabled\" : \"disabled\"}`;\n        configInfo.style.cssText = \"margin-top: 15px; font-size: 14px; color: #888;\";\n        // Append elements to wrapper\n        wrapper.appendChild(title);\n        wrapper.appendChild(description);\n        wrapper.appendChild(commandBox);\n        wrapper.appendChild(configInfo);\n        // Append wrapper to container\n        container.appendChild(wrapper);\n        console.log(\"✅ JupyterLite container initialized (placeholder mode)\");\n        console.log(\"\\uD83D\\uDCC1 All JupyterLite source code is available in packages/ directory\");\n        console.log('\\uD83D\\uDD28 Run \"yarn build:jupyter\" to build packages and enable full functionality');\n    } catch (error) {\n        console.error(\"Failed to initialize JupyterLite:\", error);\n        throw error;\n    }\n}\n/**\n * Apply theme configuration to the container\n */ async function applyThemeToContainer(container, config) {\n    const loadingIndicator = container.querySelector(\"#jupyterlite-loading-indicator\");\n    if (!loadingIndicator) return;\n    try {\n        // Handle theme application similar to original bootstrap\n        if (config.theme === \"dark\") {\n            container.classList.add(\"jp-mod-dark\");\n            container.classList.remove(\"jp-mod-light\");\n        } else if (config.theme === \"light\") {\n            container.classList.add(\"jp-mod-light\");\n            container.classList.remove(\"jp-mod-dark\");\n        } else if (config.theme === \"auto\") {\n            // Auto-detect theme from stored settings or system preference\n            await applyAutoTheme(container, config);\n        }\n        // Show loading indicator if configured\n        if (config.showLoadingIndicator) {\n            loadingIndicator.classList.remove(\"hidden\");\n        }\n    } catch (error) {\n        console.warn(\"Could not apply theme to container:\", error);\n        // Fallback to light theme\n        container.classList.add(\"jp-mod-light\");\n        container.classList.remove(\"jp-mod-dark\");\n    }\n}\n/**\n * Auto-detect and apply theme based on stored settings or system preference\n */ async function applyAutoTheme(container, config) {\n    try {\n        // Try to load from IndexedDB first\n        const localforageModule = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! localforage */ \"localforage\", 23));\n        const localforage = localforageModule.default;\n        const storageName = config.settingsStorageName || \"JupyterLite Storage\";\n        const settingsDB = localforage.createInstance({\n            name: storageName,\n            storeName: \"settings\"\n        });\n        const key = \"@jupyterlab/apputils-extension:themes\";\n        const settings = await settingsDB.getItem(key);\n        let isDarkTheme = false;\n        if (settings) {\n            // Parse theme from stored settings\n            const themeRegex = /\"theme\"\\s*:\\s*\"([^\"]+)\"/i;\n            const matches = settings.match(themeRegex);\n            if (matches && matches[1]) {\n                const themeName = matches[1].toLowerCase();\n                isDarkTheme = themeName.includes(\"dark\") || themeName.includes(\"night\") || themeName.includes(\"black\");\n            }\n        } else {\n            // Fallback to system preference\n            isDarkTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n        }\n        container.classList.remove(\"jp-mod-dark\", \"jp-mod-light\");\n        container.classList.add(isDarkTheme ? \"jp-mod-dark\" : \"jp-mod-light\");\n    } catch (error) {\n        console.warn(\"Could not auto-detect theme:\", error);\n        // Fallback to system preference\n        const isDarkTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n        container.classList.add(isDarkTheme ? \"jp-mod-dark\" : \"jp-mod-light\");\n    }\n}\n/**\n * Load JupyterLite bootstrap and initialize in container\n */ async function loadJupyterLiteBootstrap(container, config) {\n    // Get configuration from script tag\n    const configData = getConfigurationData();\n    // Load federated extensions\n    const extensionData = configData.federated_extensions || [];\n    const labExtensionUrl = configData.fullLabextensionsUrl || \"/extensions\";\n    // Load all federated extensions\n    const extensions = await Promise.allSettled(extensionData.map(async (data)=>{\n        await loadComponent(`${labExtensionUrl}/${data.name}/${data.load}`, data.name);\n    }));\n    extensions.forEach((p)=>{\n        if (p.status === \"rejected\") {\n            console.error(\"Failed to load extension:\", p.reason);\n        }\n    });\n    // Dynamically import and initialize the main JupyterLite application\n    const jupyterliteModule = await loadJupyterLiteMain();\n    // Initialize JupyterLite with container context\n    await initializeInContainer(jupyterliteModule, container, config);\n}\n/**\n * Load a federated component\n */ async function loadComponent(url, scope) {\n    await loadScript(url);\n    // Initialize webpack module federation\n    await window.__webpack_init_sharing__(\"default\");\n    const container = window._JUPYTERLAB[scope];\n    if (container) {\n        await container.init(window.__webpack_share_scopes__.default);\n    }\n}\n/**\n * Load a script dynamically\n */ function loadScript(url) {\n    return new Promise((resolve, reject)=>{\n        const script = document.createElement(\"script\");\n        script.onload = ()=>resolve();\n        script.onerror = ()=>reject(new Error(`Failed to load script: ${url}`));\n        script.async = true;\n        script.src = url;\n        document.head.appendChild(script);\n    });\n}\n/**\n * Get configuration data from the DOM\n */ function getConfigurationData() {\n    let configData = {};\n    const el = document.getElementById(\"jupyter-config-data\");\n    if (el) {\n        try {\n            configData = JSON.parse(el.textContent || \"{}\");\n        } catch (error) {\n            console.warn(\"Failed to parse jupyter-config-data:\", error);\n        }\n    }\n    return configData;\n}\n/**\n * Dynamically load the main JupyterLite module\n */ async function loadJupyterLiteMain() {\n    // For now, we'll use a simplified approach that loads JupyterLite\n    // by directly executing the bootstrap script in the browser\n    return new Promise((resolve, reject)=>{\n        try {\n            // Create and load the bootstrap script\n            const script = document.createElement(\"script\");\n            script.src = \"/bootstrap.js\";\n            script.onload = ()=>{\n                console.log(\"✓ JupyterLite bootstrap loaded\");\n                resolve({\n                    main: ()=>Promise.resolve()\n                });\n            };\n            script.onerror = ()=>{\n                console.error(\"✗ Failed to load JupyterLite bootstrap\");\n                reject(new Error(\"Failed to load JupyterLite bootstrap.js\"));\n            };\n            document.head.appendChild(script);\n        } catch (error) {\n            reject(new Error(`Failed to load JupyterLite main module: ${error.message}`));\n        }\n    });\n}\n/**\n * Initialize JupyterLite application in the specified container\n */ async function initializeInContainer(jupyterliteModule, container, config) {\n    try {\n        // Hide loading indicator\n        const loadingIndicator = container.querySelector(\"#jupyterlite-loading-indicator\");\n        if (loadingIndicator) {\n            loadingIndicator.classList.add(\"hidden\");\n        }\n        // Initialize the main JupyterLite application\n        // This will depend on the specific API exposed by your built JupyterLite\n        if (jupyterliteModule.main) {\n            await jupyterliteModule.main(container);\n        } else if (jupyterliteModule.default) {\n            await jupyterliteModule.default(container);\n        } else {\n            throw new Error(\"JupyterLite module does not expose expected main function\");\n        }\n        // Initialize kernel bridge if enabled\n        if (config.enableKernelBridge && config.kernelBridgeConfig?.exposeToConsole) {\n            initializeKernelBridgeForContainer(container);\n        }\n        // Remove loading indicator after initialization\n        setTimeout(()=>{\n            if (loadingIndicator) {\n                loadingIndicator.remove();\n            }\n            // Clean up theme classes from container\n            container.classList.remove(\"jp-mod-dark\", \"jp-mod-light\");\n        }, 1000);\n    } catch (error) {\n        console.error(\"Failed to initialize JupyterLite in container:\", error);\n        throw error;\n    }\n}\n/**\n * Initialize kernel bridge for the container instance\n */ function initializeKernelBridgeForContainer(container) {\n    // This would initialize the kernel bridge specifically for this container instance\n    // You might need to adapt the kernel bridge code to work with multiple instances\n    console.log(\"JupyterLite Kernel Bridge initialized for container\");\n    console.log(\"Access via window.jupyter or inspect the container element\");\n    // Store reference to this container's jupyter instance\n    const instanceId = container.id || `container-${Date.now()}`;\n    instances.set(instanceId, {\n        container,\n        jupyter: window.jupyter,\n        bridge: window.jupyterKernelBridge\n    });\n}\n/**\n * Cleanup function for when component unmounts\n */ function cleanupJupyterLiteInstance(container) {\n    // Find and clean up the instance\n    for (const [id, instance] of instances.entries()){\n        if (instance.container === container) {\n            instances.delete(id);\n            break;\n        }\n    }\n    // Clean up any global state if this was the last instance\n    if (instances.size === 0) {\n        // Optionally clean up global JupyterLite state\n        delete window.jupyter;\n        delete window.jupyterKernelBridge;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/jupyterlite-loader.ts\n");

/***/ })

};
;